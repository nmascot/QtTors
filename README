This is a modified version of PARI/GP, with added code to compute families of mod l Galois representations over P^1(Q) attached to curves over Q(t) (i.e. fibred surfaces over P^1(Q)).

This extra code is located in two places:
* The directory Algcurves contains gp code to compute with singular plane algebraic curves (genus, Riemann-Roch spaces...).
  You must load this code at the beginning of your gp session in order to use it (see Examples below).
* The files pic.c and tpic.c in src/basemath are libpari code to compute Galois representations afforded by the l-torsion of curves over Q and over Q(t), respectively.
  You will automatically have access to this code as long as you compile this modified version of PARI/GP appropriately (see Installation below).


Installation (for Linux)

* Clone this git repository.
* cd into the "pari" directory which has just been created.
* Execute the following two commands to compile PARI/GP (this automatically includes the code for Galois representations):
  ./Configure --mt=pthread
  make -jXX gp
  where "XX" is the number of cores which you wish to use for the compilation (e.g. "make -j5 gp", if you wish to use 5 cores).
This will create an executable file called "gp" in the pari directory.
NB None of this will affect pre-existing versions of PARI/GP which may be already installed, so
CAVEAT Make sure you run this "gp" file, as opposed to any over version of gp that may already be present on your system.


Examples: Plane curves

In order to use the plane curves code, you must first cd into the AlgCurves directory, and then start gp from there.
Then, from your gp session, type
\r Algcurves.gp
to load the code.
Example of use:
C=CrvInit(y^7-(x-2)^2*x^3);
CrvPrint(C)
This informs us that this curve has genus g=3, and describes its singular branches.
D=[[1,1],2; 1,2; 2,-1]
This creates the divisor 2 * Point(1,1) + 1 * Singular branch #1 - 1 * Singular branch #2 on C
L=RiemannRoch(C,D)
This computes a basis of the corresponding Riemann-Roch space; here, this space has dimension 1. We can check that the result is correct by looking at the divisor of the corresponding function:
FnDiv(C,L[1],1)
Since the curve has genus 3, it is either hyperelliptic or isomorphic to a plane quartic. Let us check:
CrvIsHyperell(C)
So it is actually hyperelliptic; we could also have deduced this from
CanProj(C)
which shows that the image of the canonical embedding is isomorphic to P^1.
Let us find a Weierstrass model:
CrvHyperell(C)
so this curve is isomorphic to y^2 + x^4*y = -2*x (we do not complete the square so as to get a minimal equation over Q), and we get an isomorphism to this new model.

Here are two more examples:

We identify a genus 1 curve as an elliptic curve:
C1=CrvInit(x^3+y^3-7);
CrvPrint(C1)
CrvEll(C1)
The result is an elliptic curve object in PARI/GP format isomorphic to C1, the statement that this curve has Cremona label "441b2", and an explicit isomorphism.

We parametrise a genus 0 curve:
C0=CrvInit(y^3*x^2+x^5-y^6)
CrvPrint(C0)
CrvRat(C0,1)
The result format is [[x(t),y(t)],t(x,y)].

NB all these plane curve functionalities only work over Q and Fp (if the characteristic is not too small) at the moment; we plan to extend them to other ground fields (including number fields and Fq) soon.


Examples: Galois representations

We now demonstrate the Galois representation functionalities.
Let us toogle on some comments, so as to see what is going on:
setdebug("pic",1)

We compute the mod 3 representation attached to a hyperelliptic curve of genus 2 over Q:
R=CrvGalRep(y^2-x^6+x+2,3,20,80);
The syntax is CrvGalRep(f,l,maxP,prec), where f(x,y) is a plane mode of the curve, l is the prime such that we want to look at the l-torsion of the Jacobian, maxP is an upper bound on the auxiliary prime p that the algorithm picks (technical), and prec gives the algorithm a hint on the p-adic accuracy to use (if the precision is too low, it gets cranked up automatically but this represents a waste of time;  on the other hand too large values make the calculation slower).
We can check out the 3-division polynomial:
R[1]
polisirreducible(R[1])
so the Galois action is transitive on the 3-torsion.

At the moment, not as many functionalities are implemented for Galois representations over Q(t) compared to over Q (this is related to our plane curves package not being able to handle curves over Q(t) for now). Only (hyper)elliptic curves and smooth plane quartics are supported.

The scripts gptpic1.gp, gptpic2.gp, and gptpic3.gp located in the QtTors directory demonstrate the use of these functionalities for the examples of genus 1, 2, and 3 mentioned in Section 4 of this article [https://www.maths.tcd.ie/~mascotn/research/QtTors.pdf].
The results of these scripts, i.e. the respective division polynomials over Q(t), may be found in the files R1.txt, R2.txt, and R3.txt localted in the same directory.
Beware that the examples in genus 2 and 3 are computationally VERY expensive!

CAVEAT: The Galois representation code is not very user friendly yet, in that it will crash without explanation if the input format is not exactly right.

Nicolas Mascot, March 1, 2024
